type MACI @entity(immutable: false) {
  id: Bytes! # address
  stateTreeDepth: BigInt! # uint8
  updatedAt: BigInt!

  "state"
  totalSignups: BigInt!
  numPoll: BigInt!
  latestPoll: Bytes!

  "relations"
  polls: [Poll!]! @derivedFrom(field: "maci")
}

type User @entity(immutable: true) {
  id: ID! # publicKey
  createdAt: BigInt! # uint256
  "relations"
  accounts: [Account!]! @derivedFrom(field: "owner")
}

type Account @entity(immutable: true) {
  id: ID! # stateIndex
  voiceCreditBalance: BigInt! # uint256
  createdAt: BigInt! # uint256
  "relations"
  owner: User!
}

type Poll @entity(immutable: false) {
  id: Bytes! # poll address
  pollId: BigInt! # uint256
  startDate: BigInt! # uint256
  endDate: BigInt! # uint256
  duration: BigInt! # uint256
  treeDepth: BigInt! # uint8
  voteOptions: BigInt! # uint256
  messageProcessor: Bytes! # address
  tally: Bytes! # address
  createdAt: BigInt!
  updatedAt: BigInt!
  mode: BigInt! # uint8
  "merge state after ended"
  stateRoot: BigInt # uint256
  totalSignups: BigInt! # uint256
  numMessages: BigInt! # uint256
  "relations"
  owner: Bytes!
  maci: MACI!
  votes: [Vote!]! @derivedFrom(field: "poll")
  chainHashes: [ChainHash!]! @derivedFrom(field: "poll")
}

type Vote @entity(immutable: true) {
  id: Bytes!
  data: [BigInt!]! # uint256[10]
  publicKey: [BigInt!]! # uint256[2] (x, y)
  hash: BigInt!
  timestamp: BigInt!
  cid: String

  "relations"
  poll: Poll!
}

type ChainHash @entity(immutable: false) {
  id: ID! # chain hash
  timestamp: BigInt!

  "relations"
  poll: Poll!
}
